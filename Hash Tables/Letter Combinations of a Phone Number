class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> result;
        if (digits.empty()) return result;

        unordered_map<char, string> map;
        map['2'] = "abc";
        map['3'] = "def";
        map['4'] = "ghi";
        map['5'] = "jkl";
        map['6'] = "mno";
        map['7'] = "pqrs";
        map['8'] = "tuv";
        map['9'] = "wxyz";

        string current;
        backtrack(0, digits, result, map, current);
        return result;
    }

private:
    void backtrack(int index, string &digits, vector<string> &result, 
                   unordered_map<char, string> &map, string &current) {
        if (index == digits.size()) {
            result.push_back(current);
            return;
        }

        string letters = map[digits[index]];
        for (char ch : letters) {
            current.push_back(ch);
            backtrack(index + 1, digits, result, map, current);
            current.pop_back();
        }
    }
};

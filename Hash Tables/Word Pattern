class Solution {
public:
    bool wordPattern(string pattern, string s) {
        vector<string> words;
        stringstream ss(s);
        string word;
        
        // Split the string s into words
        while (ss >> word) {
            words.push_back(word);
        }
        
        // If lengths differ, not possible
        if (words.size() != pattern.size()) return false;
        
        unordered_map<char, string> charToWord;
        unordered_map<string, char> wordToChar;
        
        for (int i = 0; i < pattern.size(); i++) {
            char c = pattern[i];
            string w = words[i];
            
            // If mapping exists, it must match
            if (charToWord.count(c) && charToWord[c] != w) return false;
            if (wordToChar.count(w) && wordToChar[w] != c) return false;
            
            // Establish new mapping
            charToWord[c] = w;
            wordToChar[w] = c;
        }
        
        return true;
    }
};


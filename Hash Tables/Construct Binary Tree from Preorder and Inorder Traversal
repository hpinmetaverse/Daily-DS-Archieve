/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
private:
    int preIdx = 0;

    TreeNode* build(vector<int>& preorder, vector<int>& inorder,
                    unordered_map<int,int>& m, int l, int r) {
        if(l > r) return nullptr; // empty range â†’ no subtree

        int rootVal = preorder[preIdx++];
        TreeNode* root = new TreeNode(rootVal);

        int inIdx = m[rootVal];

        root->left  = build(preorder, inorder, m, l, inIdx - 1);
        root->right = build(preorder, inorder, m, inIdx + 1, r);

        return root;
    }

public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> m;
        for(int i = 0; i < inorder.size(); i++) {
            m[inorder[i]] = i;
        }
        preIdx = 0;
        return build(preorder, inorder, m, 0, inorder.size() - 1);
    }
};

